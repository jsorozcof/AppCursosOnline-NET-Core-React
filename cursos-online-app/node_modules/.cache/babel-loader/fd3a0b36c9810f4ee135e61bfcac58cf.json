{"ast":null,"code":"import HttpCliente from \"../Servicios/HttpCliente\";\nimport axios from 'axios';\nconst instancia = axios.create();\ninstancia.CancelToken = axios.CancelToken;\ninstancia.isCancel = axios.isCancel;\nexport const registrarUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    instancia.post(\"/usuario/registrar\", usuario).then(response => {\n      resolve(response);\n    });\n  });\n};\nexport const obtenerUsuarioActual = dispatch => {\n  return new Promise((resolve, eject) => {\n    HttpCliente.get(\"/usuario\").then(response => {\n      console.log('response', response);\n\n      if (response.data && response.data.imagenPerfil) {\n        let fotoPerfil = response.data.imagenPerfil;\n        const nuevoFile = 'data:image/' + fotoPerfil.extension + ';base64,' + fotoPerfil.data;\n        response.data.imagenPerfil = nuevoFile;\n      }\n\n      dispatch({\n        type: \"INICIAR_SESION\",\n        sesion: response.data,\n        autenticado: true\n      });\n      resolve(response);\n    }).catch(error => {\n      console.log('error actualizar', error);\n      resolve(error);\n    });\n  });\n};\nexport const actualizarUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    HttpCliente.put('/usuario', usuario).then(response => {\n      resolve(response);\n    });\n  });\n};\nexport const loginUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    HttpCliente.post(\"/usuario/login\", usuario).then(response => {\n      resolve(response);\n    });\n  });\n};","map":{"version":3,"sources":["C:/ProyectoCore/cursos-online-app/src/actions/UsuarioAction.js"],"names":["HttpCliente","axios","instancia","create","CancelToken","isCancel","registrarUsuario","usuario","Promise","resolve","eject","post","then","response","obtenerUsuarioActual","dispatch","get","console","log","data","imagenPerfil","fotoPerfil","nuevoFile","extension","type","sesion","autenticado","catch","error","actualizarUsuario","put","loginUsuario"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,EAAlB;AACAD,SAAS,CAACE,WAAV,GAAwBH,KAAK,CAACG,WAA9B;AACAF,SAAS,CAACG,QAAV,GAAqBJ,KAAK,CAACI,QAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACzC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnCR,IAAAA,SAAS,CAACS,IAAV,CAAe,oBAAf,EAAqCJ,OAArC,EAA8CK,IAA9C,CAAoDC,QAAD,IAAc;AAC7DJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD;AAGH,GAJM,CAAP;AAKH,CANM;AAQP,OAAO,MAAMC,oBAAoB,GAAIC,QAAD,IAAc;AAC9C,SAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnCV,IAAAA,WAAW,CAACgB,GAAZ,CAAgB,UAAhB,EACKJ,IADL,CACWC,QAAD,IAAc;AAEhBI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB;;AACA,UAAIA,QAAQ,CAACM,IAAT,IAAiBN,QAAQ,CAACM,IAAT,CAAcC,YAAnC,EAAiD;AAC7C,YAAIC,UAAU,GAAGR,QAAQ,CAACM,IAAT,CAAcC,YAA/B;AACA,cAAME,SAAS,GAAG,gBAAgBD,UAAU,CAACE,SAA3B,GAAuC,UAAvC,GAAoDF,UAAU,CAACF,IAAjF;AACAN,QAAAA,QAAQ,CAACM,IAAT,CAAcC,YAAd,GAA6BE,SAA7B;AACH;;AAEDP,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAE,gBADD;AAELC,QAAAA,MAAM,EAAEZ,QAAQ,CAACM,IAFZ;AAGLO,QAAAA,WAAW,EAAE;AAHR,OAAD,CAAR;AAKAjB,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAhBL,EAiBKc,KAjBL,CAiBYC,KAAD,IAAW;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCU,KAAhC;AAEAnB,MAAAA,OAAO,CAACmB,KAAD,CAAP;AACH,KArBL;AAsBH,GAvBM,CAAP;AAwBH,CAzBM;AA4BP,OAAO,MAAMC,iBAAiB,GAAItB,OAAD,IAAa;AAC1C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnCV,IAAAA,WAAW,CAAC8B,GAAZ,CAAgB,UAAhB,EAA4BvB,OAA5B,EAAqCK,IAArC,CAA0CC,QAAQ,IAAI;AAClDJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD;AAGH,GAJM,CAAP;AAKH,CANM;AAQP,OAAO,MAAMkB,YAAY,GAAGxB,OAAO,IAAI;AACnC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnCV,IAAAA,WAAW,CAACW,IAAZ,CAAiB,gBAAjB,EAAmCJ,OAAnC,EAA4CK,IAA5C,CAAiDC,QAAQ,IAAI;AACzDJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD;AAGH,GAJM,CAAP;AAKH,CANM","sourcesContent":["import HttpCliente from \"../Servicios/HttpCliente\";\r\nimport axios from 'axios';\r\n\r\nconst instancia = axios.create();\r\ninstancia.CancelToken = axios.CancelToken;\r\ninstancia.isCancel = axios.isCancel;\r\n\r\nexport const registrarUsuario = (usuario) => {\r\n    return new Promise((resolve, eject) => {\r\n        instancia.post(\"/usuario/registrar\", usuario).then((response) => {\r\n            resolve(response);\r\n        });\r\n    });\r\n};\r\n\r\nexport const obtenerUsuarioActual = (dispatch) => {\r\n    return new Promise((resolve, eject) => {\r\n        HttpCliente.get(\"/usuario\")\r\n            .then((response) => {\r\n\r\n                console.log('response', response);\r\n                if (response.data && response.data.imagenPerfil) {\r\n                    let fotoPerfil = response.data.imagenPerfil;\r\n                    const nuevoFile = 'data:image/' + fotoPerfil.extension + ';base64,' + fotoPerfil.data;\r\n                    response.data.imagenPerfil = nuevoFile;\r\n                }\r\n\r\n                dispatch({\r\n                    type: \"INICIAR_SESION\",\r\n                    sesion: response.data,\r\n                    autenticado: true,\r\n                });\r\n                resolve(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error actualizar', error);\r\n\r\n                resolve(error);\r\n            });\r\n    });\r\n};\r\n\r\n\r\nexport const actualizarUsuario = (usuario) => {\r\n    return new Promise((resolve, eject) => {\r\n        HttpCliente.put('/usuario', usuario).then(response => {\r\n            resolve(response);\r\n        })\r\n    })\r\n}\r\n\r\nexport const loginUsuario = usuario => {\r\n    return new Promise((resolve, eject) => {\r\n        HttpCliente.post(\"/usuario/login\", usuario).then(response => {\r\n            resolve(response);\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}